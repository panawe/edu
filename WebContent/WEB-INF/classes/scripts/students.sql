CREATE TABLE SUBJECT (
       SUBJECT_ID MEDIUMINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , NAME VARCHAR(100) NOT NULL
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , PRIMARY KEY (SUBJECT_ID)
);
CREATE UNIQUE INDEX UNIQUE_SUBJECT ON SUBJECT (NAME ASC);

CREATE TABLE EXAM_TYPE (
       EXAM_TYPE_ID MEDIUMINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , NAME VARCHAR(100) NOT NULL
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , PRIMARY KEY (EXAM_TYPE_ID)
);

CREATE TABLE SCHOOL_TYPE (
       SCH_TYPE_ID TINYINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , NAME VARCHAR(100) NOT NULL
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , PRIMARY KEY (SCH_TYPE_ID)
);

CREATE TABLE SCHOOL_LEVEL (
       SCH_LEVEL_ID TINYINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , NAME VARCHAR(100) NOT NULL
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , PRIMARY KEY (SCH_LEVEL_ID)
);

CREATE TABLE SCHOOL_RELIGION (
       SCH_RELIGION_ID TINYINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , NAME VARCHAR(100) NOT NULL
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , PRIMARY KEY (SCH_RELIGION_ID)
);

CREATE TABLE AUDITS (
       AUDIT_ID BIGINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , DETAILS VARCHAR(500)
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , PRIMARY KEY (AUDIT_ID)
);

CREATE TABLE LEVELS (
       LEVEL_ID MEDIUMINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , NAME VARCHAR(100) NOT NULL
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , PRIMARY KEY (LEVEL_ID)
);

CREATE TABLE ROLES (
       ROLE_ID BIGINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , ROLE_CODE INTEGER
     , NAME VARCHAR(50) NOT NULL
     , DESCRIPTION VARCHAR(200)
     , CREATE_DATE TIMESTAMP
     , MOD_DATE TIMESTAMP
     , MOD_BY BIGINT
     , PRIMARY KEY (ROLE_ID)
);
CREATE UNIQUE INDEX UNIQUE_GROUPE ON ROLES (SCHOOL_ID ASC, NAME ASC);

CREATE TABLE MENU (
       MENU_ID BIGINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , PARENT_MENU_ID BIGINT
     , NAME VARCHAR(50) NOT NULL
     , SECURITY_CODE INTEGER
     , DESCRIPTION VARCHAR(200) NOT NULL
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , URL VARCHAR(100)
     , PRIMARY KEY (MENU_ID)
);
CREATE UNIQUE INDEX UNIQUE_MENU ON MENU (NAME ASC, PARENT_MENU_ID ASC);

CREATE TABLE POSITION (
       POSITION_ID MEDIUMINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , NAME VARCHAR(50) NOT NULL
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , PRIMARY KEY (POSITION_ID)
);

CREATE TABLE EVENT_TYPE (
       EVENT_TYPE_ID TINYINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , NAME VARCHAR(100) NOT NULL
     , SHOW_ON_GRADE_REPORT CHAR(1)
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , PRIMARY KEY (EVENT_TYPE_ID)
);

CREATE TABLE CORRESPONDANCE (
       CORRESPONDANCE_ID BIGINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , SUBJECT VARCHAR(250) NOT NULL
     , DESCRIPTION TEXT NOT NULL
     , CORRESPONDANCE_DATE DATE NOT NULL
     , SENT TINYINT NOT NULL DEFAULT 0
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , PRIMARY KEY (CORRESPONDANCE_ID)
);
ALTER TABLE CORRESPONDANCE MODIFY COLUMN CORRESPONDANCE_ID BIGINT NOT NULL AUTO_INCREMENT
      COMMENT '0 - Not sent, 1 - Sent';

CREATE TABLE SCHOOLYEAR (
       SCHOOLYEAR_ID MEDIUMINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , NAME VARCHAR(10) NOT NULL
     , DESCRIPTION VARCHAR(100)
     , BEGIN_DATE TIMESTAMP
     , END_DATE TIMESTAMP
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , PRIMARY KEY (SCHOOLYEAR_ID)
);
ALTER TABLE SCHOOLYEAR MODIFY COLUMN NAME VARCHAR(10) NOT NULL
      COMMENT 'example: 1999-2000';

CREATE TABLE CONFIGURATION (
       CONFIG_ID BIGINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , GROUP_NAME VARCHAR(45)
     , NAME VARCHAR(50) NOT NULL
     , VALUE VARCHAR(200) NOT NULL
     , DESCRIPTION VARCHAR(200)
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , PRIMARY KEY (CONFIG_ID)
);

CREATE TABLE PAY_TYPE (
       PAY_TYPE_ID TINYINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , NAME VARCHAR(100) NOT NULL
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , PRIMARY KEY (PAY_TYPE_ID)
);

CREATE TABLE ALERT (
       ALERT_ID BIGINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , SUBJECT VARCHAR(250) NOT NULL
     , MESSAGE TEXT NOT NULL
     , NBR_DAYS INT NOT NULL
     , MOMENT TINYINT
     , STATUS TINYINT NOT NULL
     , NBR_REPEAT INT NOT NULL
     , REPEAT_INTERVAL INT NOT NULL
     , FIRST_RUN_TIME TIMESTAMP
     , LAST_RUN_TIME TIMESTAMP
     , RUN_COUNT INT
     , EMAILRECEIVER TINYINT NOT NULL
     , SENDTO VARCHAR(500)
     , DISPLAY TINYINT
     , DAYS_DISPLAY INT
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , ALERT_TYPE_CODE VARCHAR(10) NOT NULL
     , PRIMARY KEY (ALERT_ID)
);
ALTER TABLE ALERT MODIFY COLUMN MOMENT TINYINT
      COMMENT '0-- BEFORE, 1= AFTER';
ALTER TABLE ALERT MODIFY COLUMN STATUS TINYINT NOT NULL
      COMMENT '0-Active, 1- Inactive';
ALTER TABLE ALERT MODIFY COLUMN EMAILRECEIVER TINYINT NOT NULL
      COMMENT '0-DON''T SEND TO STUDENT, 1- SEND TO STUDENT';
ALTER TABLE ALERT MODIFY COLUMN SENDTO VARCHAR(500)
      COMMENT 'SEND TO E_MAIL';
ALTER TABLE ALERT MODIFY COLUMN DISPLAY TINYINT
      COMMENT '0-NO, 1 YES';

CREATE TABLE CATEGORY (
       CATEGORY_ID BIGINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , NAME VARCHAR(75) NOT NULL
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , PRIMARY KEY (CATEGORY_ID)
);

CREATE TABLE BRAND (
       BRAND_ID BIGINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , NAME VARCHAR(75) NOT NULL
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , PRIMARY KEY (BRAND_ID)
);

CREATE TABLE TEST (
       TEST_ID BIGINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , TITLE VARCHAR(100)
     , DESCRIPTION TEXT NOT NULL
     , BEGIN_MESSAGE TEXT
     , END_MESSAGE TEXT
     , DURATION MEDIUMINT NOT NULL
     , PRORATE_SCORE TINYINT NOT NULL
     , SCORE MEDIUMINT NOT NULL DEFAULT 100
     , CERTIFICATE_SCORE MEDIUMINT NOT NULL DEFAULT 75
     , DUE_DATE DATE
     , SYSTEM_GENERATED TINYINT NOT NULL DEFAULT 0
     , MOD_BY BIGINT NOT NULL
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , PASSWORD VARCHAR(15)
     , IS_PUBLIC TINYINT NOT NULL DEFAULT 0
     , SHOW_EACH_ANSWER TINYINT NOT NULL DEFAULT 0
     , SHOW_ALL_ANSWERS TINYINT NOT NULL DEFAULT 0
     , SHOW_RATING TINYINT NOT NULL DEFAULT 0
     , SHOW_LIVE_SCORE TINYINT NOT NULL
     , SHOW_POINTS TINYINT NOT NULL DEFAULT 0
     , ALLOW_MULTIPLE_TRIAL TINYINT NOT NULL
     , CAN_CONTINUE_LATER TINYINT NOT NULL
     , RESULT_DAYS MEDIUMINT NOT NULL DEFAULT  999999
     , CAN_PRINT TINYINT ZEROFILL DEFAULT 1
     , SUBJECT_ID BIGINT NOT NULL
     , QUESTION_PER_PAGE MEDIUMINT NOT NULL DEFAULT 1
     , LEVEL_ID MEDIUMINT NOT NULL
     , PRIMARY KEY (TEST_ID)
);
ALTER TABLE TEST MODIFY COLUMN DURATION MEDIUMINT NOT NULL
      COMMENT 'DURATION IN MINUTE. 9999 = INFINITE';
ALTER TABLE TEST MODIFY COLUMN PRORATE_SCORE TINYINT NOT NULL
      COMMENT '0 -- USE SCORE FROM QUESTIONS, 1= EQUALY PRORATE SCRORE';
ALTER TABLE TEST MODIFY COLUMN SYSTEM_GENERATED TINYINT NOT NULL DEFAULT 0
      COMMENT '0= Random System generated, 1= User directed';
ALTER TABLE TEST MODIFY COLUMN PASSWORD VARCHAR(15)
      COMMENT 'PROTECT THE QUIZ';
ALTER TABLE TEST MODIFY COLUMN SHOW_EACH_ANSWER TINYINT NOT NULL DEFAULT 0
      COMMENT 'SHOW ANSWER AFTER EACH QUESTION';
ALTER TABLE TEST MODIFY COLUMN SHOW_ALL_ANSWERS TINYINT NOT NULL DEFAULT 0
      COMMENT 'SHOW ANSWERS AT THE END';
ALTER TABLE TEST MODIFY COLUMN SHOW_RATING TINYINT NOT NULL DEFAULT 0
      COMMENT '0 - Do not display question rating, 1 - Display questions rating';
ALTER TABLE TEST MODIFY COLUMN ALLOW_MULTIPLE_TRIAL TINYINT NOT NULL
      COMMENT '0- Not allow users to pass multiple times, 2 - allow';
ALTER TABLE TEST MODIFY COLUMN CAN_CONTINUE_LATER TINYINT NOT NULL
      COMMENT '0- Test in one shot, 1- Can continue later';
ALTER TABLE TEST MODIFY COLUMN RESULT_DAYS MEDIUMINT NOT NULL DEFAULT  999999
      COMMENT 'NUMBER OF DAYS TO KEEP RESULTS -- 999999 = INFINITE';
ALTER TABLE TEST MODIFY COLUMN CAN_PRINT TINYINT ZEROFILL DEFAULT 1
      COMMENT '1= YES, 0 = No';

CREATE TABLE RATING (
       RATING_ID MEDIUMINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , NAME VARCHAR(15) NOT NULL
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , PRIMARY KEY (RATING_ID)
);
ALTER TABLE RATING COMMENT='RATING';

CREATE TABLE COURSE_HISTORY (
       COURSE_ID MEDIUMINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , SUBJECT_ID MEDIUMINT NOT NULL
     , CLASS_ID MEDIUMINT NOT NULL
     , TEACHER_ID BIGINT NOT NULL
     , MAX_MARK DOUBLE NOT NULL
     , BEGIN_DATE DATE NOT NULL
     , END_DATE DATE
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , PRIMARY KEY (COURSE_ID)
);
CREATE UNIQUE INDEX IX_COURSE_HISTORY_1 ON COURSE_HISTORY (TEACHER_ID ASC, SUBJECT_ID ASC, CLASS_ID ASC, BEGIN_DATE ASC);

CREATE TABLE PARAMETER (
       PARAMETER_ID MEDIUMINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , NAME VARCHAR(15) NOT NULL
     , DATA_TYPE VARCHAR(50)
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , DISPLAY_NAME VARCHAR(50)
     , INPUT_TYPE VARCHAR(50)
     , PARAMETER_SQL VARCHAR(2000)
     , PARAMETER_VALUES VARCHAR(2000)
     , MAX_LENGTH VARCHAR(3)
     , SIZE VARCHAR(3)
     , PRIMARY KEY (PARAMETER_ID)
);
ALTER TABLE PARAMETER COMMENT='PARAMETER';

CREATE TABLE CLASS_COUNCIL (
       CLASS_COUNCIL_ID BIGINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , COUNCIL_DATE DATE NOT NULL
     , DECISIONS TEXT NOT NULL
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , PRIMARY KEY (CLASS_COUNCIL_ID)
);

CREATE TABLE EVENT (
       EVENT_ID BIGINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , TITLE VARCHAR(100) NOT NULL
     , BEGIN_TIME TIMESTAMP NOT NULL
     , END_TIME TIMESTAMP NOT NULL
     , DESCRIPTION TEXT NOT NULL
     , REC_TYPE VARCHAR(100)
     , EVENT_PID MEDIUMINT
     , EVENT_LENGTH MEDIUMINT
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , PRIMARY KEY (EVENT_ID)
);
ALTER TABLE EVENT MODIFY COLUMN BEGIN_TIME TIMESTAMP NOT NULL
      COMMENT 'FORMAT HH24:MI (14:50)';
ALTER TABLE EVENT MODIFY COLUMN END_TIME TIMESTAMP NOT NULL
      COMMENT 'FORMAT HH24:MI (14:50)';

CREATE TABLE TUITION_TYPE (
       TUITION_TYPE_ID MEDIUMINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , NAME VARCHAR(50) NOT NULL
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , PRIMARY KEY (TUITION_TYPE_ID)
);
CREATE UNIQUE INDEX UNIQUE_TUITION_TYPE ON TUITION_TYPE (SCHOOL_ID ASC, NAME ASC);

CREATE TABLE OPERATION_TYPE (
       OPERATION_TYPE_ID BIGINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , NAME VARCHAR(50) NOT NULL
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , PRIMARY KEY (OPERATION_TYPE_ID)
);

CREATE TABLE DISEASE (
       DISEASE_ID BIGINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , NAME VARCHAR(50) NOT NULL
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , PRIMARY KEY (DISEASE_ID)
);

CREATE TABLE USERS_FEEDBACK (
       FEEDBACK_ID BIGINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , SCHOOL_NAME VARCHAR(150)
     , FULL_NAME VARCHAR(150)
     , EMAIL VARCHAR(150)
     , USER_TYPE TINYINT
     , OVERALL_RATING TINYINT
     , INTERFACE_RATING TINYINT
     , FUNCTIONALITY_RATING TINYINT
     , PERFORMANCE_RATING TINYINT
     , COST_RATING TINYINT
     , SUPPORT_RATING TINYINT
     , DOC_RATING TINYINT
     , COMMENT TEXT
     , USER_DETAILS TEXT
     , MOD_BY BIGINT NOT NULL
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , PRIMARY KEY (FEEDBACK_ID)
);
ALTER TABLE USERS_FEEDBACK MODIFY COLUMN USER_TYPE TINYINT
      COMMENT '0 Other, 1=Teacher, 3= Parent, 2 Student, 4 =Informaticien, 5 School personnel, 6 Investor';

CREATE TABLE YEAR_SUMMARY (
       SUMMARY_ID BIGINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , STUDENT_ID BIGINT NOT NULL
     , LEVEL_ID MEDIUMINT NOT NULL
     , CLASS_NAME VARCHAR(50) NOT NULL
     , GRADE_NAME VARCHAR(50)
     , RANK_NBR INT NOT NULL
     , MARK DOUBLE NOT NULL
     , STATUS TINYINT NOT NULL
     , NBR_STUDENT INT NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , SCHOOLYEAR_ID MEDIUMINT NOT NULL
     , DECISION VARCHAR(50)
     , COMMENT TEXT
     , UNIQUE UQ_YEAR_SUMMARY_1 (SCHOOL_ID, SCHOOLYEAR_ID, CLASS_NAME, STUDENT_ID)
     , PRIMARY KEY (SUMMARY_ID)
);

CREATE TABLE EXAM_TIMETABLE (
       TIMETABLE_ID BIGINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , EXAM_DATE DATE NOT NULL
     , BEGIN_TIME VARCHAR(5) NOT NULL
     , END_TIME VARCHAR(5) NOT NULL
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , TERM_ID MEDIUMINT
     , SCHOOLYEAR_ID MEDIUMINT NOT NULL
     , CLASS_ID MEDIUMINT NOT NULL
     , COURSE_ID MEDIUMINT NOT NULL
     , PRIMARY KEY (TIMETABLE_ID)
);

CREATE TABLE NEWS (
       NEWS_ID BIGINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , TITLE VARCHAR(100) NOT NULL
     , NEWS_DATE DATE NOT NULL
     , MESSAGE TEXT NOT NULL
     , PICTURE LONGBLOB
     , AUTHOR VARCHAR(100)
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , PRIMARY KEY (NEWS_ID)
);

CREATE TABLE TERM_GROUP (
       TERM_GROUP_ID MEDIUMINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , NAME VARCHAR(50) NOT NULL
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , PRIMARY KEY (TERM_GROUP_ID)
);

CREATE TABLE TERM_SUMMARY (
       SUMMARY_ID BIGINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , STUDENT_ID BIGINT NOT NULL
     , LEVEL_ID MEDIUMINT NOT NULL
     , TERM_ID MEDIUMINT NOT NULL
     , CLASS_NAME VARCHAR(50) NOT NULL
     , GRADE_NAME VARCHAR(50)
     , RANK_NBR INT NOT NULL
     , MARK DOUBLE NOT NULL
     , STATUS TINYINT NOT NULL
     , NBR_STUDENT INT NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , SCHOOLYEAR_ID MEDIUMINT NOT NULL
     , DECISION VARCHAR(50)
     , COMMENT TEXT
     , UNIQUE UQ_TERM_SUMMARY_1 (SCHOOL_ID, SCHOOLYEAR_ID, CLASS_NAME, STUDENT_ID, TERM_ID)
     , PRIMARY KEY (SUMMARY_ID)
);

CREATE TABLE TERM_GROUP_SUMMARY (
       SUMMARY_ID BIGINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , STUDENT_ID BIGINT NOT NULL
     , LEVEL_ID MEDIUMINT NOT NULL
     , TERM_GROUP_ID MEDIUMINT NOT NULL
     , CLASS_NAME VARCHAR(50) NOT NULL
     , GRADE_NAME VARCHAR(50)
     , RANK_NBR INT NOT NULL
     , MARK DOUBLE NOT NULL
     , STATUS TINYINT NOT NULL
     , NBR_STUDENT INT NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , SCHOOLYEAR_ID MEDIUMINT NOT NULL
     , DECISION VARCHAR(50)
     , COMMENT TEXT
     , UNIQUE UQ_TERM_GRP_SUMMARY_1 (SCHOOL_ID, SCHOOLYEAR_ID, CLASS_NAME, STUDENT_ID, TERM_GROUP_ID)
     , PRIMARY KEY (SUMMARY_ID)
);

CREATE TABLE COUNTRY (
       COUNTRY_ID BIGINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , NAME VARCHAR(100) NOT NULL
     , DOMAIN CHAR(2)
     , CODE MEDIUMINT
     , POPULATION BIGINT
     , AREA DOUBLE
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , PRIMARY KEY (COUNTRY_ID)
);
CREATE UNIQUE INDEX UNIQUE_COUNTRY1 ON COUNTRY (NAME ASC);

CREATE TABLE USERS (
       USER_ID BIGINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , USER_NAME VARCHAR(50) NOT NULL
     , PASSWORD VARCHAR(50) NOT NULL
     , FIRST_NAME VARCHAR(50) NOT NULL
     , LAST_NAME VARCHAR(50) NOT NULL
     , CAN_APPROVE TINYINT NOT NULL DEFAULT 0
     , E_MAIL VARCHAR(50)
     , pageSkin VARCHAR(15) NOT NULL
     , CURRENT_LOCALE VARCHAR(10)
     , CSV_DELIMITER VARCHAR(10)
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , PHONE VARCHAR(20)
     , POSITION_ID MEDIUMINT
     , STATUS SMALLINT DEFAULT 1
     , PRIMARY KEY (USER_ID)
     , INDEX (POSITION_ID)
     , CONSTRAINT FK_USERS_1 FOREIGN KEY (POSITION_ID)
                  REFERENCES POSITION (POSITION_ID)
);
ALTER TABLE USERS MODIFY COLUMN POSITION_ID MEDIUMINT
      COMMENT 'DECRIT LE POST OCCUPE';
ALTER TABLE USERS MODIFY COLUMN STATUS SMALLINT DEFAULT 1
      COMMENT '0-inactive, 1- active';
CREATE UNIQUE INDEX UNIQUE_USER ON USERS (USER_NAME ASC);

CREATE TABLE TEACHER (
       TEACHER_ID BIGINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , FIRST_NAME VARCHAR(50) NOT NULL
     , LAST_NAME VARCHAR(50) NOT NULL
     , MATRICULE VARCHAR(10) NOT NULL
     , MIDDLE_NAME VARCHAR(50)
     , NICK_NAME VARCHAR(50)
     , BIRTH_DATE DATE
     , ADDRESS VARCHAR(100) NOT NULL
     , E_MAIL VARCHAR(50)
     , CITY_OF_BIRTH VARCHAR(150) NOT NULL
     , PHONE VARCHAR(20) NOT NULL
     , CELL_PHONE VARCHAR(20)
     , COMMENTS VARCHAR(100)
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , USER_ID BIGINT
     , CITY VARCHAR(150) NOT NULL
     , image LONGBLOB
     , STATUS TINYINT
     , CURRENT_SALARY DECIMAL
     , HIRED_DATE DATE
     , RESUME VARCHAR(2000)
     , ALLERGY TEXT
     , SCH_RELIGION_ID TINYINT 
     , SEX CHAR(1) NOT NULL
     , COUNTRY_ID BIGINT NOT NULL
     , COUNTRY_OF_BIRTH BIGINT NOT NULL
     , PRIMARY KEY (TEACHER_ID)
     , INDEX (USER_ID)
     , CONSTRAINT FK_TEACHER_1 FOREIGN KEY (USER_ID)
                  REFERENCES USERS (USER_ID)
     , INDEX (SCH_RELIGION_ID)
     , CONSTRAINT FK_TEACHER_3 FOREIGN KEY (SCH_RELIGION_ID)
                  REFERENCES SCHOOL_RELIGION (SCH_RELIGION_ID)
     , INDEX (COUNTRY_ID)
     , CONSTRAINT FK_TEACHER_4 FOREIGN KEY (COUNTRY_ID)
                  REFERENCES COUNTRY (COUNTRY_ID)
);
ALTER TABLE TEACHER MODIFY COLUMN STATUS TINYINT
      COMMENT '0=INATIVE, 1 = ACTIVE';
CREATE UNIQUE INDEX UNIQUE_TEACHER ON TEACHER (MATRICULE ASC);

CREATE TABLE SCHOOL (
       SCHOOL_ID MEDIUMINT NOT NULL AUTO_INCREMENT
     , NAME VARCHAR(100) NOT NULL
     , SHORT_NAME VARCHAR(15) NOT NULL
     , ADDRESS VARCHAR(100)
     , CITY VARCHAR(150)
     , PHONE VARCHAR(20) NOT NULL
     , SCH_TYPE_ID TINYINT
     , SCH_RELIGION_ID TINYINT
     , SCH_LEVEL_ID TINYINT
     , INSPECTOR VARCHAR(100)
     , DIRECTOR VARCHAR(100)
     , LOGO LONGBLOB
     , LEFT_REPORT_HEADER TEXT
     , REPORT_HEADER TEXT
     , SHOW_REPORT_HEADER TINYINT NOT NULL
     , SHOW_DEFAULT_PASSWORD TINYINT NOT NULL DEFAULT 0
     , GENERATE_RANDOM_PASSWORD TINYINT NOT NULL DEFAULT 0
     , GENERATE_MATRICULE TINYINT NOT NULL DEFAULT 0
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , EMAIL VARCHAR(100) NOT NULL
     , COUNTRY_ID BIGINT NOT NULL
     , PRIMARY KEY (SCHOOL_ID)
     , INDEX (COUNTRY_ID)
     , CONSTRAINT FK_SCHOOL_1 FOREIGN KEY (COUNTRY_ID)
                  REFERENCES COUNTRY (COUNTRY_ID)
);
ALTER TABLE SCHOOL MODIFY COLUMN SHOW_REPORT_HEADER TINYINT NOT NULL
      COMMENT '0= No, 1 = Yes';
ALTER TABLE SCHOOL MODIFY COLUMN SHOW_DEFAULT_PASSWORD TINYINT NOT NULL DEFAULT 0
      COMMENT '0= No, 1 = Yes';
ALTER TABLE SCHOOL MODIFY COLUMN GENERATE_RANDOM_PASSWORD TINYINT NOT NULL DEFAULT 0
      COMMENT '0= No, 1 = Yes';
ALTER TABLE SCHOOL MODIFY COLUMN GENERATE_MATRICULE TINYINT NOT NULL DEFAULT 0
      COMMENT '1= YES, 0 = NO';

CREATE TABLE TERM (
       TERM_ID MEDIUMINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , NAME VARCHAR(50) NOT NULL
     , SHOW_FINAL_RANK CHAR(1)
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , TERM_GROUP_ID MEDIUMINT
     , PRIMARY KEY (TERM_ID)
     , INDEX (TERM_GROUP_ID)
     , CONSTRAINT FK_TERM_1 FOREIGN KEY (TERM_GROUP_ID)
                  REFERENCES TERM_GROUP (TERM_GROUP_ID)
);

CREATE TABLE CLASS (
       CLASS_ID MEDIUMINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , NAME VARCHAR(50) NOT NULL
     , NBR_STUDENTS MEDIUMINT NOT NULL DEFAULT 0
     , CAPACITY MEDIUMINT NOT NULL DEFAULT 0
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , LEVEL_ID MEDIUMINT NOT NULL
     , RESPONSIBLE_TEACHER_ID MEDIUMINT
     , UNIQUE UQ_CLASS_1 (SCHOOL_ID, NAME)
     , PRIMARY KEY (CLASS_ID)
     , INDEX (LEVEL_ID)
     , CONSTRAINT FK_CLASS_1 FOREIGN KEY (LEVEL_ID)
                  REFERENCES LEVELS (LEVEL_ID)
);

CREATE TABLE STUDENT (
       STUDENT_ID BIGINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , MATRICULE VARCHAR(10) NOT NULL
     , FIRST_NAME VARCHAR(50) NOT NULL
     , LAST_NAME VARCHAR(50) NOT NULL
     , MIDDLE_NAME VARCHAR(50)
     , NICK_NAME VARCHAR(50)
     , BIRTH_DATE DATE
     , ADDRESS VARCHAR(100) NOT NULL
     , EMAIL VARCHAR(50)
     , CITY_OF_BIRTH VARCHAR(150) NOT NULL
     , PHONE VARCHAR(20) NOT NULL
     , CELL_PHONE VARCHAR(20)
     , FATHER_FULL_NAME VARCHAR(100) NOT NULL
     , MOTHER_FULL_NAME VARCHAR(100) NOT NULL
     , TUTOR_FULL_NAME VARCHAR(100)
     , FATHER_ADDRESS VARCHAR(100)
     , FATHER_CITY VARCHAR(150)
     , FATHER_E_MAIL VARCHAR(50)
     , MOTHER_ADDRESS VARCHAR(100)
     , MOTHER_CITY VARCHAR(150)
     , MOTHER_E_MAIL VARCHAR(50)
     , TUTOR_ADDRESS VARCHAR(100)
     , TUTOR_CITY VARCHAR(150)
     , TUTOR_E_MAIL VARCHAR(50)
     , FATHER_PHONE VARCHAR(20)
     , MOTHER_PHONE VARCHAR(20)
     , TUTOR_PHONE VARCHAR(20)
     , COMMENTS VARCHAR(100)
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , USER_ID BIGINT NOT NULL
     , CITY VARCHAR(150) NOT NULL
     , image LONGBLOB
     , STATUS TINYINT
     , ENROLLMENT_ID MEDIUMINT
     , ALLERGY TEXT
     , SCH_RELIGION_ID TINYINT NOT NULL
     , SEX CHAR(1) NOT NULL
     , DECISION TEXT
     , LEVEL_ID MEDIUMINT
     , COUNTRY_ID BIGINT NOT NULL
     , COUNTRY_OF_BIRTH BIGINT NOT NULL
     , FATHER_COUNTRY BIGINT
     , MOTHER_COUNTRY BIGINT
     , TUTOR_COUNTRY BIGINT
     , PRIMARY KEY (STUDENT_ID)
     , INDEX (USER_ID)
     , CONSTRAINT FK_STUDENT_3 FOREIGN KEY (USER_ID)
                  REFERENCES USERS (USER_ID)
     , INDEX (SCH_RELIGION_ID)
     , CONSTRAINT FK_STUDENT_5 FOREIGN KEY (SCH_RELIGION_ID)
                  REFERENCES SCHOOL_RELIGION (SCH_RELIGION_ID)
     , INDEX (LEVEL_ID)
     , CONSTRAINT FK_STUDENT_6 FOREIGN KEY (LEVEL_ID)
                  REFERENCES LEVELS (LEVEL_ID)
     , INDEX (COUNTRY_ID)
     , CONSTRAINT FK_STUDENT_4 FOREIGN KEY (COUNTRY_ID)
                  REFERENCES COUNTRY (COUNTRY_ID)
);
ALTER TABLE STUDENT MODIFY COLUMN STATUS TINYINT
      COMMENT 'ACTIVE/INACTIVE: 0=INACTIVE, 1=ACTIVE, 2=TEMPORARY (ONLINE REGISTRATION)';
ALTER TABLE STUDENT MODIFY COLUMN SEX CHAR(1) NOT NULL
      COMMENT 'M=Masculin, F=Feminin';
CREATE UNIQUE INDEX UNIQUE_STUDENT ON STUDENT (MATRICULE ASC);

CREATE TABLE COURSE (
       COURSE_ID MEDIUMINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , SUBJECT_ID MEDIUMINT NOT NULL
     , GROUP_CODE VARCHAR(50)
     , CLASS_ID MEDIUMINT NOT NULL
     , TEACHER_ID BIGINT NOT NULL
     , MAX_MARK DOUBLE NOT NULL
     , BEGIN_DATE DATE
     , END_DATE DATE
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , PRIMARY KEY (COURSE_ID)
     , INDEX (SUBJECT_ID)
     , CONSTRAINT FK_COURSE_2 FOREIGN KEY (SUBJECT_ID)
                  REFERENCES SUBJECT (SUBJECT_ID)
     , INDEX (CLASS_ID)
     , CONSTRAINT FK_COURSE_3 FOREIGN KEY (CLASS_ID)
                  REFERENCES CLASS (CLASS_ID)
     , INDEX (TEACHER_ID)
     , CONSTRAINT FK_COURSE_4 FOREIGN KEY (TEACHER_ID)
                  REFERENCES TEACHER (TEACHER_ID)
);
CREATE UNIQUE INDEX IX_COURSE_1 ON COURSE (TEACHER_ID ASC, CLASS_ID ASC, SUBJECT_ID ASC, BEGIN_DATE ASC);

CREATE TABLE SENROLLMENT (
       ENROLLMENT_ID MEDIUMINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , COMMENTS VARCHAR(100)
     , ENROLLMENT_DATE DATE
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , STUDENT_ID BIGINT NOT NULL
     , CLASS_ID MEDIUMINT NOT NULL
     , SCHOOLYEAR_ID MEDIUMINT NOT NULL
     , PRIMARY KEY (ENROLLMENT_ID)
     , INDEX (STUDENT_ID)
     , CONSTRAINT FK_ENROLLMENT_1 FOREIGN KEY (STUDENT_ID)
                  REFERENCES STUDENT (STUDENT_ID)
     , INDEX (CLASS_ID)
     , CONSTRAINT FK_ENROLLMENT_2 FOREIGN KEY (CLASS_ID)
                  REFERENCES CLASS (CLASS_ID)
     , INDEX (CLASS_ID)
     , CONSTRAINT FK_SENROLLMENT_3 FOREIGN KEY (CLASS_ID)
                  REFERENCES CLASS (CLASS_ID)
     , INDEX (SCHOOLYEAR_ID)
     , CONSTRAINT FK_SENROLLMENT_4 FOREIGN KEY (SCHOOLYEAR_ID)
                  REFERENCES SCHOOLYEAR (SCHOOLYEAR_ID)
);

CREATE TABLE GRADE (
       GRADE_ID MEDIUMINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , NAME VARCHAR(50) NOT NULL
     , BEGIN_RANGE DOUBLE
     , END_RANGE DOUBLE
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , PRIMARY KEY (GRADE_ID)
     , INDEX (SCHOOL_ID)
     , CONSTRAINT FK_GRADE_1 FOREIGN KEY (SCHOOL_ID)
                  REFERENCES SCHOOL (SCHOOL_ID)
);

CREATE TABLE TUITION (
       TUITION_ID BIGINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , DESCRIPTION VARCHAR(100) NOT NULL
     , DUE_DATE DATE
     , AMOUNT DECIMAL NOT NULL
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , SCHOOLYEAR_ID MEDIUMINT NOT NULL
     , TUITION_TYPE_ID MEDIUMINT NOT NULL
     , PRIMARY KEY (TUITION_ID)
     , INDEX (SCHOOLYEAR_ID)
     , CONSTRAINT FK_TUITION_1 FOREIGN KEY (SCHOOLYEAR_ID)
                  REFERENCES SCHOOLYEAR (SCHOOLYEAR_ID)
     , INDEX (TUITION_TYPE_ID)
     , CONSTRAINT FK_TUITION_3 FOREIGN KEY (TUITION_TYPE_ID)
                  REFERENCES TUITION_TYPE (TUITION_TYPE_ID)
);

CREATE TABLE QUESTION (
       QUESTION_ID BIGINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , BODY TEXT NOT NULL
     , SCORE MEDIUMINT NOT NULL DEFAULT 0
     , NBR_ANSWER TINYINT NOT NULL DEFAULT 1
     , DISPLAY_NBR_ANSWER TINYINT NOT NULL DEFAULT 1
     , ANSWER_EXPLANATION TEXT
     , SL_ID BIGINT
     , IS_PUBLIC TINYINT NOT NULL DEFAULT 1
     , MOD_BY BIGINT NOT NULL
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , RATING_ID MEDIUMINT NOT NULL
     , SUBJECT_ID MEDIUMINT NOT NULL
     , LEVEL_ID MEDIUMINT NOT NULL
     , PRIMARY KEY (QUESTION_ID)
     , INDEX (RATING_ID)
     , CONSTRAINT FK_QUESTION_1 FOREIGN KEY (RATING_ID)
                  REFERENCES RATING (RATING_ID)
     , INDEX (SUBJECT_ID)
     , CONSTRAINT FK_QUESTION_2 FOREIGN KEY (SUBJECT_ID)
                  REFERENCES SUBJECT (SUBJECT_ID)
     , INDEX (LEVEL_ID)
     , CONSTRAINT FK_QUESTION_3 FOREIGN KEY (LEVEL_ID)
                  REFERENCES LEVELS (LEVEL_ID)
);
ALTER TABLE QUESTION COMMENT='QUESTION';
ALTER TABLE QUESTION MODIFY COLUMN NBR_ANSWER TINYINT NOT NULL DEFAULT 1
      COMMENT 'NUMBER OF ANSWERS';
ALTER TABLE QUESTION MODIFY COLUMN DISPLAY_NBR_ANSWER TINYINT NOT NULL DEFAULT 1
      COMMENT '1= DISPLAY NUMBER OF ANSWERS, 0= DO NOT DISPLAY NUMBER OF ANSWERS';
ALTER TABLE QUESTION MODIFY COLUMN IS_PUBLIC TINYINT NOT NULL DEFAULT 1
      COMMENT '0= Not shown in random test, 1= Shown in Random test';

CREATE TABLE EXAM (
       EXAM_ID MEDIUMINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , NAME VARCHAR(100) NOT NULL
     , EXAM_DATE DATE
     , EXAM_TYPE_ID MEDIUMINT NOT NULL
     , EVALUATION_TYPE TINYINT NOT NULL DEFAULT 0
     , PUBLISH_MARKS TINYINT NOT NULL DEFAULT 0
     , COURSE_ID MEDIUMINT NOT NULL
     , TERM_ID MEDIUMINT NOT NULL
     , MAX_MARK DOUBLE NOT NULL
     , RATIO DOUBLE NOT NULL
     , SCHOOLYEAR_ID MEDIUMINT NOT NULL
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , PRIMARY KEY (EXAM_ID)
     , INDEX (EXAM_TYPE_ID)
     , CONSTRAINT FK_EXAM_1 FOREIGN KEY (EXAM_TYPE_ID)
                  REFERENCES EXAM_TYPE (EXAM_TYPE_ID)
     , INDEX (TERM_ID)
     , CONSTRAINT FK_EXAM_2 FOREIGN KEY (TERM_ID)
                  REFERENCES TERM (TERM_ID)
     , INDEX (COURSE_ID)
     , CONSTRAINT FK_EXAM_4 FOREIGN KEY (COURSE_ID)
                  REFERENCES COURSE (COURSE_ID)
     , INDEX (SCHOOLYEAR_ID)
     , CONSTRAINT FK_EXAM_5 FOREIGN KEY (SCHOOLYEAR_ID)
                  REFERENCES SCHOOLYEAR (SCHOOLYEAR_ID)
);
ALTER TABLE EXAM MODIFY COLUMN EVALUATION_TYPE TINYINT NOT NULL DEFAULT 0
      COMMENT '0 - NOTE DE CLASSE, 1 - EXAMEN (COMPOSITION)';
ALTER TABLE EXAM MODIFY COLUMN PUBLISH_MARKS TINYINT NOT NULL DEFAULT 0
      COMMENT '1= YES, 0=NO';

CREATE TABLE USERS_TEST (
       UT_ID BIGINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , USER_ID BIGINT NOT NULL
     , TEST_ID BIGINT NOT NULL
     , BEGIN_DATE TIMESTAMP
     , END_DATE TIMESTAMP
     , DURATION MEDIUMINT
     , RIGHT_ANSWER MEDIUMINT
     , WRONG_ANSWER MEDIUMINT
     , SCORE MEDIUMINT
     , COMPLETED TINYINT NOT NULL DEFAULT 0
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , PRIMARY KEY (UT_ID)
     , INDEX (USER_ID)
     , CONSTRAINT FK_USERS_TEST_1 FOREIGN KEY (USER_ID)
                  REFERENCES USERS (USER_ID)
     , INDEX (TEST_ID)
     , CONSTRAINT FK_USERS_TEST_2 FOREIGN KEY (TEST_ID)
                  REFERENCES TEST (TEST_ID)
);
ALTER TABLE USERS_TEST MODIFY COLUMN COMPLETED TINYINT NOT NULL DEFAULT 0
      COMMENT '1= YES, 0= NO';

CREATE TABLE PRODUCT (
       PRODUCT_ID BIGINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , NAME VARCHAR(75) NOT NULL
     , PRODUCT_CODE VARCHAR(50) NOT NULL
     , BRAND_ID BIGINT NOT NULL
     , PICTURE BLOB
     , ISBN VARCHAR(50)
     , BAR_CODE VARCHAR(50)
     , QUANTITY INTEGER NOT NULL DEFAULT 0
     , QUANTITY_IN_STOCK INTEGER NOT NULL
     , MINQTY_TO_ORDER INT
     , RETURNABLE CHAR(1) DEFAULT '0'
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , CATEGORY_ID BIGINT NOT NULL
     , PRIMARY KEY (PRODUCT_ID)
     , INDEX (BRAND_ID)
     , CONSTRAINT FK_PRODUCT_2 FOREIGN KEY (BRAND_ID)
                  REFERENCES BRAND (BRAND_ID)
     , INDEX (CATEGORY_ID)
     , CONSTRAINT FK_PRODUCT_3 FOREIGN KEY (CATEGORY_ID)
                  REFERENCES CATEGORY (CATEGORY_ID)
);

CREATE TABLE SUPPLIER (
       SUPPLIER_ID BIGINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , NAME VARCHAR(75) NOT NULL
     , CONTACT_NAME VARCHAR(250)
     , ADDRESS1 VARCHAR(75)
     , ADDRESS2 VARCHAR(75)
     , CITY VARCHAR(150)
     , PHONE_NUMBER VARCHAR(12)
     , FAX_NUMBER VARCHAR(12)
     , EMAIL VARCHAR(30)
     , WEBSITE VARCHAR(100)
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , COUNTRY_ID BIGINT
     , PRIMARY KEY (SUPPLIER_ID)
     , INDEX (COUNTRY_ID)
     , CONSTRAINT FK_SUPPLIER_1 FOREIGN KEY (COUNTRY_ID)
                  REFERENCES COUNTRY (COUNTRY_ID)
);

CREATE TABLE CARRIER (
       CARRIER_ID BIGINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , NAME VARCHAR(75) NOT NULL
     , CONTACT_NAME VARCHAR(250)
     , ADDRESS1 VARCHAR(75)
     , ADDRESS2 VARCHAR(75)
     , CITY VARCHAR(150)
     , PHONE_NUMBER VARCHAR(12)
     , FAX_NUMBER VARCHAR(12)
     , EMAIL VARCHAR(30)
     , WEBSITE VARCHAR(100)
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , COUNTRY_ID BIGINT
     , PRIMARY KEY (CARRIER_ID)
     , INDEX (COUNTRY_ID)
     , CONSTRAINT FK_CARRIER_1 FOREIGN KEY (COUNTRY_ID)
                  REFERENCES COUNTRY (COUNTRY_ID)
);

CREATE TABLE ANSWER (
       ANSWER_ID BIGINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , ANSWER_SEQ MEDIUMINT NOT NULL
     , BODY TEXT NOT NULL
     , QUESTION_ID BIGINT NOT NULL
     , IS_CORRECT TINYINT NOT NULL DEFAULT 0
     , MOD_BY BIGINT NOT NULL
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , PRIMARY KEY (ANSWER_ID)
     , INDEX (QUESTION_ID)
     , CONSTRAINT FK_ANSWER_1 FOREIGN KEY (QUESTION_ID)
                  REFERENCES QUESTION (QUESTION_ID)
);
ALTER TABLE ANSWER COMMENT='ANSWER';
ALTER TABLE ANSWER MODIFY COLUMN IS_CORRECT TINYINT NOT NULL DEFAULT 0
      COMMENT '1 = YES, 0 = No';

CREATE TABLE SHIPMENT (
       SHIPMENT_ID BIGINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , SHIPMENT_NUMBER VARCHAR(20) NOT NULL
     , ORIGIN VARCHAR(75)
     , DESTINATION VARCHAR(75)
     , DATE_OF_DISPATCH DATE
     , DATE_OF_ARRIVAL DATE
     , DELIVER_BY VARCHAR(75)
     , RECEIVED_BY VARCHAR(75)
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , CARRIER_ID BIGINT NOT NULL
     , PRIMARY KEY (SHIPMENT_ID)
     , INDEX (CARRIER_ID)
     , CONSTRAINT FK_SHIPMENT_1 FOREIGN KEY (CARRIER_ID)
                  REFERENCES CARRIER (CARRIER_ID)
);

CREATE TABLE PURCHASE_ORDER (
       ORDER_ID BIGINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , SUPPLIER_ID BIGINT NOT NULL
     , ORDER_DATE DATE
     , POS_DELIVERY_DATE DATE
     , CLIENT_NUMBER VARCHAR(20)
     , DISCOUNT_RATE DOUBLE
     , DISCOUNT_AMOUNT DOUBLE
     , TOTAL_AMOUNT DOUBLE NOT NULL
     , STATUS TINYINT NOT NULL
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , SHIPMENT_ID BIGINT
     , PRIMARY KEY (ORDER_ID)
     , INDEX (SUPPLIER_ID)
     , CONSTRAINT FK_ORDER_1 FOREIGN KEY (SUPPLIER_ID)
                  REFERENCES SUPPLIER (SUPPLIER_ID)
     , INDEX (SHIPMENT_ID)
     , CONSTRAINT FK_PURCHASE_ORDER_2 FOREIGN KEY (SHIPMENT_ID)
                  REFERENCES SHIPMENT (SHIPMENT_ID)
);

CREATE TABLE CURRICULUM (
       CURRICULUM_ID MEDIUMINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , WEEK_NBR MEDIUMINT
     , WEEK_START_DATE DATE
     , OBJECTIVE TEXT NOT NULL
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , SUBJECT_ID MEDIUMINT NOT NULL
     , LEVEL_ID MEDIUMINT NOT NULL
     , SCHOOLYEAR_ID MEDIUMINT NOT NULL
     , PRIMARY KEY (CURRICULUM_ID)
     , INDEX (SUBJECT_ID)
     , CONSTRAINT FK_CURRICULUM_1 FOREIGN KEY (SUBJECT_ID)
                  REFERENCES SUBJECT (SUBJECT_ID)
     , INDEX (LEVEL_ID)
     , CONSTRAINT FK_CURRICULUM_2 FOREIGN KEY (LEVEL_ID)
                  REFERENCES LEVELS (LEVEL_ID)
     , INDEX (SCHOOLYEAR_ID)
     , CONSTRAINT FK_CURRICULUM_3 FOREIGN KEY (SCHOOLYEAR_ID)
                  REFERENCES SCHOOLYEAR (SCHOOLYEAR_ID)
);

CREATE TABLE SESSION_HISTORY (
       SESSION_HISTORY_ID BIGINT NOT NULL AUTO_INCREMENT
     , SESSION_ID VARCHAR(50)
     , SCHOOL_ID MEDIUMINT NOT NULL
     , USER_ID BIGINT NOT NULL
     , BEGIN_DATE TIMESTAMP NOT NULL
     , END_DATE TIMESTAMP NOT NULL
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , HOST_NAME VARCHAR(50)
     , HOST_IP VARCHAR(50)
     , BROWSER VARCHAR(250)
     , LANGUAGE VARCHAR(50)
     , OSUSER VARCHAR(50)
     , PRIMARY KEY (SESSION_HISTORY_ID)
     , INDEX (USER_ID)
     , CONSTRAINT FK_SESSION_HISTORY_1 FOREIGN KEY (USER_ID)
                  REFERENCES USERS (USER_ID)
);

CREATE TABLE ROLES_USER (
       ROLE_USER_ID BIGINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , ROLE_ID BIGINT NOT NULL
     , USER_ID BIGINT NOT NULL
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , PRIMARY KEY (ROLE_USER_ID)
     , INDEX (USER_ID)
     , CONSTRAINT FK_ROLES_USER_1 FOREIGN KEY (USER_ID)
                  REFERENCES USERS (USER_ID)
     , INDEX (ROLE_ID)
     , CONSTRAINT FK_ROLES_USER_2 FOREIGN KEY (ROLE_ID)
                  REFERENCES ROLES (ROLE_ID)
);

CREATE TABLE ROLES_MENU (
       ROLE_MENU_ID BIGINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , ROLE_ID BIGINT NOT NULL
     , MENU_ID BIGINT NOT NULL
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , ACCESS_LEVEL TINYINT NOT NULL
     , PRIMARY KEY (ROLE_MENU_ID)
     , INDEX (ROLE_ID)
     , CONSTRAINT FK_ROLES_MENU_1 FOREIGN KEY (ROLE_ID)
                  REFERENCES ROLES (ROLE_ID)
     , INDEX (MENU_ID)
     , CONSTRAINT FK_ROLES_MENU_2 FOREIGN KEY (MENU_ID)
                  REFERENCES MENU (MENU_ID)
);

CREATE TABLE MARK (
       MARK_ID BIGINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , EXAM_ID MEDIUMINT NOT NULL
     , ENROLLMENT_ID MEDIUMINT NOT NULL
     , MARK DOUBLE NOT NULL
     , GRADE_ID MEDIUMINT
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , APPROVED_BY BIGINT
     , PRIMARY KEY (MARK_ID)
     , INDEX (EXAM_ID)
     , CONSTRAINT FK_MARKS_1 FOREIGN KEY (EXAM_ID)
                  REFERENCES EXAM (EXAM_ID)
     , INDEX (ENROLLMENT_ID)
     , CONSTRAINT FK_MARKS_2 FOREIGN KEY (ENROLLMENT_ID)
                  REFERENCES SENROLLMENT (ENROLLMENT_ID)
     , INDEX (GRADE_ID)
     , CONSTRAINT FK_MARKS_3 FOREIGN KEY (GRADE_ID)
                  REFERENCES GRADE (GRADE_ID)
);

CREATE TABLE SCHOOLING (
       SCHOOLING_ID BIGINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , DESCRIPTION TEXT
     , EVENT_DATE DATE
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , EVENT_TYPE_ID TINYINT NOT NULL
     , STUDENT_ID BIGINT
     , TEACHER_ID BIGINT
     , TERM_ID MEDIUMINT
     , SCHOOLYEAR_ID MEDIUMINT
     , PRIMARY KEY (SCHOOLING_ID)
     , INDEX (EVENT_TYPE_ID)
     , CONSTRAINT FK_DISCIPLINE_1 FOREIGN KEY (EVENT_TYPE_ID)
                  REFERENCES EVENT_TYPE (EVENT_TYPE_ID)
     , INDEX (STUDENT_ID)
     , CONSTRAINT FK_DISCIPLINE_2 FOREIGN KEY (STUDENT_ID)
                  REFERENCES STUDENT (STUDENT_ID)
     , INDEX (TEACHER_ID)
     , CONSTRAINT FK_SCHOOLING_3 FOREIGN KEY (TEACHER_ID)
                  REFERENCES TEACHER (TEACHER_ID)
     , INDEX (TERM_ID)
     , CONSTRAINT FK_SCHOOLING_4 FOREIGN KEY (TERM_ID)
                  REFERENCES TERM (TERM_ID)
     , INDEX (SCHOOLYEAR_ID)
     , CONSTRAINT FK_SCHOOLING_5 FOREIGN KEY (SCHOOLYEAR_ID)
                  REFERENCES SCHOOLYEAR (SCHOOLYEAR_ID)
);

CREATE TABLE RECEIVER (
       RECEIVER_ID BIGINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , STUDENT_ID BIGINT
     , TEACHER_ID BIGINT
     , CORRESPONDANCE_ID BIGINT NOT NULL
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , PRIMARY KEY (RECEIVER_ID)
     , INDEX (CORRESPONDANCE_ID)
     , CONSTRAINT FK_SCORRESPONDANCE_2 FOREIGN KEY (CORRESPONDANCE_ID)
                  REFERENCES CORRESPONDANCE (CORRESPONDANCE_ID)
     , INDEX (STUDENT_ID)
     , CONSTRAINT FK_SCORRESPONDANCE_1 FOREIGN KEY (STUDENT_ID)
                  REFERENCES STUDENT (STUDENT_ID)
     , INDEX (TEACHER_ID)
     , CONSTRAINT FK_RECEIVER_3 FOREIGN KEY (TEACHER_ID)
                  REFERENCES TEACHER (TEACHER_ID)
);

CREATE TABLE PAYMENT (
       PAYMENT_ID BIGINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , PAYMENT_DATE DATE NOT NULL
     , AMOUNT DECIMAL NOT NULL
     , REBATE DECIMAL DEFAULT 0
     , COMMENT VARCHAR(100)
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , TUITION_ID BIGINT NOT NULL
     , ENROLLMENT_ID MEDIUMINT NOT NULL
     , PRIMARY KEY (PAYMENT_ID)
     , INDEX (ENROLLMENT_ID)
     , CONSTRAINT FK_PAYMENT_2 FOREIGN KEY (ENROLLMENT_ID)
                  REFERENCES SENROLLMENT (ENROLLMENT_ID)
     , INDEX (TUITION_ID)
     , CONSTRAINT FK_PAYMENT_3 FOREIGN KEY (TUITION_ID)
                  REFERENCES TUITION (TUITION_ID)
);

CREATE TABLE SALARY_PAYMENT (
       SALARY_ID BIGINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , PAYMENT_DATE DATE
     , PAYROLL_BEGIN_DATE DATE
     , PAYROLL_END_DATE DATE
     , AMOUNT DECIMAL NOT NULL
     , COMMENT TEXT
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , TEACHER_ID BIGINT NOT NULL
     , PRIMARY KEY (SALARY_ID)
     , INDEX (TEACHER_ID)
     , CONSTRAINT FK_SALARY_1 FOREIGN KEY (TEACHER_ID)
                  REFERENCES TEACHER (TEACHER_ID)
);

CREATE TABLE SALARY (
       SALARY_ID BIGINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , EFFECTIVE_DATE DATE NOT NULL
     , AMOUNT DECIMAL NOT NULL
     , COMMENT TEXT
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , TEACHER_ID BIGINT NOT NULL
     , PAY_TYPE_ID TINYINT NOT NULL
     , PRIMARY KEY (SALARY_ID)
     , INDEX (TEACHER_ID)
     , CONSTRAINT FK_SALARY_HISTORY_1 FOREIGN KEY (TEACHER_ID)
                  REFERENCES TEACHER (TEACHER_ID)
     , INDEX (PAY_TYPE_ID)
     , CONSTRAINT FK_SALARY_2 FOREIGN KEY (PAY_TYPE_ID)
                  REFERENCES PAY_TYPE (PAY_TYPE_ID)
);

CREATE TABLE ALERT_RECEIVER (
       RECEIVER_ID BIGINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , ALERT_ID BIGINT NOT NULL
     , USER_ID BIGINT NOT NULL
     , TUITION_ID BIGINT
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , PRIMARY KEY (RECEIVER_ID)
     , INDEX (ALERT_ID)
     , CONSTRAINT FK_STUDENT_ALERT_2 FOREIGN KEY (ALERT_ID)
                  REFERENCES ALERT (ALERT_ID)
     , INDEX (USER_ID)
     , CONSTRAINT FK_ALERT_RECEIVER_2 FOREIGN KEY (USER_ID)
                  REFERENCES USERS (USER_ID)
     , INDEX (TUITION_ID)
     , CONSTRAINT FK_ALERT_RECEIVER_3 FOREIGN KEY (TUITION_ID)
                  REFERENCES TUITION (TUITION_ID)
);

CREATE TABLE TEST_QUESTION (
       TQ_ID BIGINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , QUESTION_SEQ MEDIUMINT NOT NULL
     , MOD_BY BIGINT NOT NULL
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , TEST_ID BIGINT NOT NULL
     , SCORE MEDIUMINT DEFAULT 0
     , QUESTION_ID BIGINT NOT NULL
     , PRIMARY KEY (TQ_ID)
     , INDEX (QUESTION_ID)
     , CONSTRAINT FK_TEST_QUESTION_1 FOREIGN KEY (QUESTION_ID)
                  REFERENCES QUESTION (QUESTION_ID)
     , INDEX (TEST_ID)
     , CONSTRAINT FK_TEST_QUESTION_2 FOREIGN KEY (TEST_ID)
                  REFERENCES TEST (TEST_ID)
);

CREATE TABLE FEEDBACK (
       FEEDBACK_ID BIGINT NOT NULL
     , SCHOOL_ID MEDIUMINT NOT NULL
     , QUESTION_ID BIGINT NOT NULL
     , USER_ID BIGINT NOT NULL
     , REMARK TEXT NOT NULL
     , REVIEWED_BY BIGINT
     , REVIEW_DATE TIMESTAMP
     , REVIEW_COMMENT TEXT
     , IS_VALID TINYINT
     , MOD_BY BIGINT NOT NULL
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , PRIMARY KEY (FEEDBACK_ID)
     , INDEX (QUESTION_ID)
     , CONSTRAINT FK_FEEDBACK_1 FOREIGN KEY (QUESTION_ID)
                  REFERENCES QUESTION (QUESTION_ID)
);
ALTER TABLE FEEDBACK MODIFY COLUMN IS_VALID TINYINT
      COMMENT '1= YES THE REMARK IS VALID, 0 = NO IT IS NOT';

CREATE TABLE QNA (
       QNA_ID BIGINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , ANSWER_ID BIGINT NOT NULL
     , QUESTION_ID BIGINT NOT NULL
     , IS_CORRECT TINYINT NOT NULL
     , UT_ID BIGINT NOT NULL
     , MOD_BY BIGINT NOT NULL
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , PRIMARY KEY (QNA_ID)
     , INDEX (QUESTION_ID)
     , CONSTRAINT FK_QNA_1 FOREIGN KEY (QUESTION_ID)
                  REFERENCES QUESTION (QUESTION_ID)
     , INDEX (ANSWER_ID)
     , CONSTRAINT FK_QNA_2 FOREIGN KEY (ANSWER_ID)
                  REFERENCES ANSWER (ANSWER_ID)
     , INDEX (UT_ID)
     , CONSTRAINT FK_QNA_3 FOREIGN KEY (UT_ID)
                  REFERENCES USERS_TEST (UT_ID)
);

CREATE TABLE ORDER_PRODUCT (
       ORDER_PRODUCT_ID BIGINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , ORDER_ID BIGINT NOT NULL
     , PRODUCT_ID BIGINT NOT NULL
     , DISCOUNT_RATE DOUBLE
     , DISCOUNT_AMOUNT DOUBLE
     , TOTAL_AMOUNT DOUBLE
     , TAX_RATE DOUBLE
     , TOTAL_TAX DOUBLE
     , QTY_ORDERED BIGINT NOT NULL
     , QTY_RECEIVED BIGINT
     , QTY_DAMAGED BIGINT DEFAULT 0
     , COMMENT TEXT
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , PRIMARY KEY (ORDER_PRODUCT_ID)
     , INDEX (PRODUCT_ID)
     , CONSTRAINT FK_ORDER_PRODUCT_2 FOREIGN KEY (PRODUCT_ID)
                  REFERENCES PRODUCT (PRODUCT_ID)
     , INDEX (ORDER_ID)
     , CONSTRAINT FK_ORDER_PRODUCT_3 FOREIGN KEY (ORDER_ID)
                  REFERENCES PURCHASE_ORDER (ORDER_ID)
);

CREATE TABLE PRODUCT_CONSUMER (
       PRODUCT_CONSUMER_ID BIGINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID CHAR(10) NOT NULL
     , PRODUCT_ID BIGINT NOT NULL
     , USER_ID BIGINT NOT NULL
     , QTY_REQUESTED BIGINT NOT NULL
     , QTY_PICKED BIGINT DEFAULT 0
     , STATUS TINYINT NOT NULL DEFAULT 0
     , REQUEST_DATE DATE
     , PICK_UP_DATE DATE
     , RELEASED_BY VARCHAR(75)
     , PICKED_UP_BY VARCHAR(75)
     , QTY_TO_BE_RETURNED INTEGER
     , QTY_RETURNED INTEGER
     , POSSIBLE_RETURNED_DATE DATE
     , RETURN_DATE DATE
     , APPROVED_BY BIGINT
     , COMMENT TEXT
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , PRIMARY KEY (PRODUCT_CONSUMER_ID)
     , INDEX (PRODUCT_ID)
     , CONSTRAINT FK_PRODUCT_CONSUMER_1 FOREIGN KEY (PRODUCT_ID)
                  REFERENCES PRODUCT (PRODUCT_ID)
     , INDEX (USER_ID)
     , CONSTRAINT FK_PRODUCT_CONSUMER_2 FOREIGN KEY (USER_ID)
                  REFERENCES USERS (USER_ID)
);
ALTER TABLE PRODUCT_CONSUMER MODIFY COLUMN STATUS TINYINT NOT NULL DEFAULT 0
      COMMENT '0- new, 1 - partial, 2- Closed';

CREATE TABLE TENROLLMENT (
       TENROLLMENT_ID BIGINT NOT NULL AUTO_INCREMENT
     , TEACHER_ID BIGINT NOT NULL
     , SCHOOL_ID MEDIUMINT NOT NULL
     , EFFECTIVE_DATE DATE
     , COMMENTS VARCHAR(100)
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , PRIMARY KEY (TENROLLMENT_ID)
     , INDEX (TEACHER_ID)
     , CONSTRAINT FK_TENROLLMENT_1 FOREIGN KEY (TEACHER_ID)
                  REFERENCES TEACHER (TEACHER_ID)
);

CREATE TABLE AVERAGES (
       AVERAGE_ID BIGINT NOT NULL AUTO_INCREMENT
     , SCHOOLYEAR_ID MEDIUMINT NOT NULL
     , SCHOOL_ID MEDIUMINT NOT NULL
     , TERM_ID MEDIUMINT NOT NULL
     , STUDENT_ID BIGINT NOT NULL
     , TEACHER_ID BIGINT NOT NULL
     , LEVEL_ID MEDIUMINT NOT NULL
     , NBR_STUDENT INT NOT NULL
     , CLASS_NAME VARCHAR(50) NOT NULL
     , CLASS_MARK DOUBLE NOT NULL
     , CLASS_RATIO DOUBLE NOT NULL
     , EXAM_MARK DOUBLE NOT NULL
     , EXAM_RATIO DOUBLE NOT NULL
     , AVERAGE_MARK DOUBLE NOT NULL
     , MAX_MARK INT NOT NULL
     , RANK_NBR INT
     , GRADE_NAME VARCHAR(50)
     , STATUS TINYINT NOT NULL
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , SUBJECT_ID MEDIUMINT NOT NULL
     , SUBJECT_GROUP VARCHAR(50)
     , PRIMARY KEY (AVERAGE_ID)
     , INDEX (SCHOOLYEAR_ID)
     , CONSTRAINT FK_MOYENNE_1 FOREIGN KEY (SCHOOLYEAR_ID)
                  REFERENCES SCHOOLYEAR (SCHOOLYEAR_ID)
     , INDEX (SCHOOL_ID)
     , CONSTRAINT FK_MOYENNE_2 FOREIGN KEY (SCHOOL_ID)
                  REFERENCES SCHOOL (SCHOOL_ID)
     , INDEX (TERM_ID)
     , CONSTRAINT FK_MOYENNE_3 FOREIGN KEY (TERM_ID)
                  REFERENCES TERM (TERM_ID)
     , INDEX (STUDENT_ID)
     , CONSTRAINT FK_MOYENNE_4 FOREIGN KEY (STUDENT_ID)
                  REFERENCES STUDENT (STUDENT_ID)
     , INDEX (TEACHER_ID)
     , CONSTRAINT FK_MOYENNE_5 FOREIGN KEY (TEACHER_ID)
                  REFERENCES TEACHER (TEACHER_ID)
     , INDEX (LEVEL_ID)
     , CONSTRAINT FK_MOYENNE_6 FOREIGN KEY (LEVEL_ID)
                  REFERENCES LEVELS (LEVEL_ID)
     , INDEX (SUBJECT_ID)
     , CONSTRAINT FK_AVERAGES_7 FOREIGN KEY (SUBJECT_ID)
                  REFERENCES SUBJECT (SUBJECT_ID)
);
CREATE INDEX IX_AVERAGES_1 ON AVERAGES (SCHOOL_ID ASC, SCHOOLYEAR_ID DESC, TERM_ID ASC, CLASS_NAME ASC);

CREATE TABLE JOB (
       JOB_ID BIGINT NOT NULL AUTO_INCREMENT
     , DETAIL VARCHAR(500)
     , STATUS TINYINT NOT NULL
     , MESSAGE VARCHAR(250)
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , SCHOOL_ID MEDIUMINT NOT NULL
     , PRIMARY KEY (JOB_ID)
     , INDEX (SCHOOL_ID)
     , CONSTRAINT FK_JOB_1 FOREIGN KEY (SCHOOL_ID)
                  REFERENCES SCHOOL (SCHOOL_ID)
);

CREATE TABLE BULLETIN (
       BULLETIN_ID BIGINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , STUDENT_ID BIGINT NOT NULL
     , TERM_ID MEDIUMINT NOT NULL
     , LEVEL_ID MEDIUMINT NOT NULL
     , CLASS_NAME VARCHAR(50) NOT NULL
     , GRADE_NAME VARCHAR(50)
     , RANK_NBR INT NOT NULL
     , MARK DOUBLE NOT NULL
     , STATUS TINYINT NOT NULL
     , NBR_STUDENT INT NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , SCHOOLYEAR_ID MEDIUMINT NOT NULL
     , UNIQUE UQ_BULLETIN_1 (SCHOOL_ID, SCHOOLYEAR_ID, TERM_ID, CLASS_NAME, STUDENT_ID)
     , PRIMARY KEY (BULLETIN_ID)
     , INDEX (SCHOOL_ID)
     , CONSTRAINT FK_BULLETIN_1 FOREIGN KEY (SCHOOL_ID)
                  REFERENCES SCHOOL (SCHOOL_ID)
     , INDEX (STUDENT_ID)
     , CONSTRAINT FK_BULLETIN_2 FOREIGN KEY (STUDENT_ID)
                  REFERENCES STUDENT (STUDENT_ID)
     , INDEX (TERM_ID)
     , CONSTRAINT FK_BULLETIN_3 FOREIGN KEY (TERM_ID)
                  REFERENCES TERM (TERM_ID)
     , INDEX (LEVEL_ID)
     , CONSTRAINT FK_BULLETIN_4 FOREIGN KEY (LEVEL_ID)
                  REFERENCES LEVELS (LEVEL_ID)
     , INDEX (SCHOOLYEAR_ID)
     , CONSTRAINT FK_BULLETIN_5 FOREIGN KEY (SCHOOLYEAR_ID)
                  REFERENCES SCHOOLYEAR (SCHOOLYEAR_ID)
);

CREATE TABLE TIMETABLE (
       TIMETABLE_ID BIGINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , DAYOFWEEK VARCHAR(10) NOT NULL
     , BEGIN_TIME VARCHAR(5) NOT NULL
     , END_TIME VARCHAR(5) NOT NULL
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , TERM_ID MEDIUMINT
     , SCHOOLYEAR_ID MEDIUMINT NOT NULL
     , CLASS_ID MEDIUMINT NOT NULL
     , COURSE_ID MEDIUMINT NOT NULL
     , PRIMARY KEY (TIMETABLE_ID)
     , INDEX (SCHOOLYEAR_ID)
     , CONSTRAINT FK_TIMETABLE_2 FOREIGN KEY (SCHOOLYEAR_ID)
                  REFERENCES SCHOOLYEAR (SCHOOLYEAR_ID)
     , INDEX (CLASS_ID)
     , CONSTRAINT FK_TIMETABLE_3 FOREIGN KEY (CLASS_ID)
                  REFERENCES CLASS (CLASS_ID)
     , INDEX (COURSE_ID)
     , CONSTRAINT FK_TIMETABLE_4 FOREIGN KEY (COURSE_ID)
                  REFERENCES COURSE (COURSE_ID)
);

CREATE TABLE MEDICAL_VISIT (
       MEDICAL_VISIT_ID BIGINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , VISIT_DATE DATE NOT NULL
     , DIAGNOSIS TEXT
     , PRESCRIPTION TEXT
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , USER_ID BIGINT NOT NULL
     , CONSULTED_BY VARCHAR(100) NOT NULL
     , DISEASE_ID BIGINT NOT NULL
     , PRIMARY KEY (MEDICAL_VISIT_ID)
     , INDEX (USER_ID)
     , CONSTRAINT FK_MEDICAL_VISITE_2 FOREIGN KEY (USER_ID)
                  REFERENCES USERS (USER_ID)
     , INDEX (DISEASE_ID)
     , CONSTRAINT FK_MEDICAL_VISIT_2 FOREIGN KEY (DISEASE_ID)
                  REFERENCES DISEASE (DISEASE_ID)
);

CREATE TABLE OPERATION (
       OPERATION_ID BIGINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , LOG VARCHAR(500) NOT NULL
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , OPERATION_TYPE_ID BIGINT NOT NULL
     , PRIMARY KEY (OPERATION_ID)
     , INDEX (OPERATION_TYPE_ID)
     , CONSTRAINT FK_OPERATION_1 FOREIGN KEY (OPERATION_TYPE_ID)
                  REFERENCES OPERATION_TYPE (OPERATION_TYPE_ID)
);

CREATE TABLE FILES (
       FILE_ID BIGINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , CONTENT LONGBLOB
     , NAME VARCHAR(100)
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , STUDENT_ID BIGINT NOT NULL
     , PRIMARY KEY (FILE_ID)
     , INDEX (STUDENT_ID)
     , CONSTRAINT FK_FILES_1 FOREIGN KEY (STUDENT_ID)
                  REFERENCES STUDENT (STUDENT_ID)
);

CREATE TABLE CURRICULUM_PROGRESS (
       PROGRESS_ID MEDIUMINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , CLASS_ID MEDIUMINT NOT NULL
     , TEACHER_ID BIGINT NOT NULL
     , STATUS TINYINT
     , COMMENT TEXT
     , CURRICULUM_ID MEDIUMINT NOT NULL
     , PRIMARY KEY (PROGRESS_ID)
     , INDEX (CLASS_ID)
     , CONSTRAINT FK_CURRICULUM_PROGRESS_1 FOREIGN KEY (CLASS_ID)
                  REFERENCES CLASS (CLASS_ID)
     , INDEX (TEACHER_ID)
     , CONSTRAINT FK_CURRICULUM_PROGRESS_2 FOREIGN KEY (TEACHER_ID)
                  REFERENCES TEACHER (TEACHER_ID)
     , INDEX (CURRICULUM_ID)
     , CONSTRAINT FK_CURRICULUM_PROGRESS_3 FOREIGN KEY (CURRICULUM_ID)
                  REFERENCES CURRICULUM (CURRICULUM_ID)
);

CREATE TABLE FURNITURE (
       FURNITURE_ID MEDIUMINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , DESCRIPTION TEXT NOT NULL
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , LEVEL_ID MEDIUMINT NOT NULL
     , SUBJECT_ID MEDIUMINT NOT NULL
     , SCHOOLYEAR_ID MEDIUMINT NOT NULL
     , PRIMARY KEY (FURNITURE_ID)
     , INDEX (LEVEL_ID)
     , CONSTRAINT FK_FURNITURE_1 FOREIGN KEY (LEVEL_ID)
                  REFERENCES LEVELS (LEVEL_ID)
     , INDEX (SUBJECT_ID)
     , CONSTRAINT FK_FURNITURE_2 FOREIGN KEY (SUBJECT_ID)
                  REFERENCES SUBJECT (SUBJECT_ID)
     , INDEX (SCHOOLYEAR_ID)
     , CONSTRAINT FK_FURNITURE_3 FOREIGN KEY (SCHOOLYEAR_ID)
                  REFERENCES SCHOOLYEAR (SCHOOLYEAR_ID)
);

CREATE TABLE STUDENT_TUITION (
       STUDENT_TUITION_ID BIGINT NOT NULL AUTO_INCREMENT
     , TUITION_ID BIGINT NOT NULL
     , STUDENT_ID BIGINT NOT NULL
     , SCHOOL_ID MEDIUMINT NOT NULL
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , PRIMARY KEY (STUDENT_TUITION_ID)
     , INDEX (TUITION_ID)
     , CONSTRAINT FK_STUDENT_TUITION_1 FOREIGN KEY (TUITION_ID)
                  REFERENCES TUITION (TUITION_ID)
     , INDEX (STUDENT_ID)
     , CONSTRAINT FK_STUDENT_TUITION_2 FOREIGN KEY (STUDENT_ID)
                  REFERENCES STUDENT (STUDENT_ID)
);

CREATE TABLE EXAMPTION (
       EXAMPTION_ID MEDIUMINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , EXPT_REASON_ID SMALLINT NOT NULL
     , COMMENTS VARCHAR(100)
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , COURSE_ID MEDIUMINT NOT NULL
     , STUDENT_ID BIGINT NOT NULL
     , PRIMARY KEY (EXAMPTION_ID)
     , INDEX (COURSE_ID)
     , CONSTRAINT FK_EXAMPTION_1 FOREIGN KEY (COURSE_ID)
                  REFERENCES COURSE (COURSE_ID)
     , INDEX (STUDENT_ID)
     , CONSTRAINT FK_EXAMPTION_2 FOREIGN KEY (STUDENT_ID)
                  REFERENCES STUDENT (STUDENT_ID)
);


CREATE TABLE PARENT (
       PARENT_ID MEDIUMINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , LAST_NAME VARCHAR(100) NOT NULL
     , FIRST_NAME VARCHAR(100) NOT NULL
     , MIDDLE_NAME VARCHAR(100)
     , ADDRESS VARCHAR(1000)
     , CITY VARCHAR(150)
     , EMAIL VARCHAR(100)
     , TELEPHONE VARCHAR(20)
     , PROFESSION VARCHAR(100)
     , WORKPLACE VARCHAR(100)
     , COUNTRY_ID BIGINT NULL
     , IMAGE LONGBLOB
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , PRIMARY KEY (PARENT_ID)
     , INDEX (COUNTRY_ID)
     , CONSTRAINT FK_PARENT_1 FOREIGN KEY (COUNTRY_ID)
                  REFERENCES COUNTRY (COUNTRY_ID)
);


CREATE TABLE PARENT_STUDENT (
       PARENT_STUDENT_ID BIGINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , PARENT_ID MEDIUMINT NOT NULL
     , STUDENT_ID BIGINT NOT NULL
     , PARENT_TYPE_ID BIGINT NULL
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , PRIMARY KEY (PARENT_STUDENT_ID)
     , INDEX (PARENT_ID)
     , CONSTRAINT FK_PARENT_STUDENT_1 FOREIGN KEY (PARENT_ID)
                  REFERENCES PARENT (PARENT_ID)
     , INDEX (STUDENT_ID)
     , CONSTRAINT FK_PARENT_STUDENT_2 FOREIGN KEY (STUDENT_ID)
                  REFERENCES STUDENT (STUDENT_ID)
);


CREATE TABLE ASSIGNMENT_FILE (
       ASSIGNMENT_FILE_ID BIGINT NOT NULL AUTO_INCREMENT
     , SCHOOL_ID MEDIUMINT NOT NULL
     , CONTENT LONGBLOB NOT NULL
     , NAME VARCHAR(200) NOT NULL
     , DESCRIPTION VARCHAR(2000)
     , FILE_TYPE VARCHAR(10) NOT NULL
     , UPLOAD_BY BIGINT NOT NULL
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , PRIMARY KEY (ASSIGNMENT_FILE_ID)
);


CREATE TABLE COURSE_ASSIGNMENT_FILE (
       COURSE_ASSIGNMENT_FILE_ID BIGINT NOT NULL AUTO_INCREMENT
     , ASSIGNMENT_FILE_ID BIGINT NOT NULL 
     , SCHOOL_ID MEDIUMINT NOT NULL
     , CLASS_ID BIGINT NOT NULL
     , SCHOOLYEAR_ID BIGINT NOT NULL
     , SUBJECT_ID BIGINT NOT NULL
     , EXAM_TYPE_ID MEDIUMINT NOT NULL
     , EXAM_DATE DATE NULL
     , DUE_DATE DATE NULL
     , CREATE_DATE TIMESTAMP NOT NULL
     , MOD_DATE TIMESTAMP NOT NULL
     , MOD_BY BIGINT NOT NULL
     , PRIMARY KEY (COURSE_ASSIGNMENT_FILE_ID)
     , INDEX (ASSIGNMENT_FILE_ID)
     , CONSTRAINT FK_COURSE_ASSIGNMENT_FILE_1 FOREIGN KEY (ASSIGNMENT_FILE_ID)
                  REFERENCES ASSIGNMENT_FILE (ASSIGNMENT_FILE_ID)
     , INDEX (CLASS_ID)
     , CONSTRAINT FK_COURSE_ASSIGNMENT_FILE_2 FOREIGN KEY (CLASS_ID)
                  REFERENCES CLASS (CLASS_ID)
     , INDEX (SUBJECT_ID)
     , CONSTRAINT FK_COURSE_ASSIGNMENT_FILE_3 FOREIGN KEY (SUBJECT_ID)
                  REFERENCES SUBJECT (SUBJECT_ID)
     , INDEX (SCHOOLYEAR_ID)
     , CONSTRAINT FK_COURSE_ASSIGNMENT_FILE_4 FOREIGN KEY (SCHOOLYEAR_ID)
                  REFERENCES SCHOOLYEAR (SCHOOLYEAR_ID)
     , INDEX (EXAM_TYPE_ID)
     , CONSTRAINT FK_COURSE_ASSIGNMENT_FILE_5 FOREIGN KEY (EXAM_TYPE_ID)
                  REFERENCES EXAM_TYPE (EXAM_TYPE_ID)

);